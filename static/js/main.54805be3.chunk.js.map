{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tiles","AppComponent","numDone","crossOut","e","target","style","console","log","minimum","maximum","values","random","number","Math","floor","includes","push","rng","this","rngGenerator","length","rows","i","b","key","onClick","className","alt","src","id","rel","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y5BAGMA,G,WAAUA,OAEKC,E,2MACnBC,QAAU,E,EACVC,SAAW,SAACC,GACV,GAAyC,iBAArCA,EAAEC,OAAOC,MAAT,eAGF,OAFA,EAAKJ,eACLE,EAAEC,OAAOC,MAAT,eAAmC,QAGrCF,EAAEC,OAAOC,MAAT,eAAmC,eACnC,EAAKJ,UAEgB,KAAjB,EAAKA,SACPK,QAAQC,IAAI,U,4EAIHC,EAASC,GACpB,IAAIC,EAAS,GACd,OAAO,SAASC,IACf,IAAMC,EAASC,KAAKC,MAClBD,KAAKF,UAAYF,EAAUD,GAAYA,GAEvC,OAAIE,EAAOK,SAASH,GACXD,KAETD,EAAOM,KAAKJ,GACLA,M,+BAOT,IAFA,IAAIK,EAAMC,KAAKC,aAAa,EAAGpB,EAAMqB,QACjCC,EAAO,CAAC,GAAG,GAAG,GAAG,GAAG,IACfC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAKC,GAAGC,GAAK,wBAAIC,IAAKF,EAAI,IAAMC,EAAGE,QAASP,KAAKhB,UAAWH,EAAMkB,MAGtE,OACE,yBAAKS,UAAU,OACb,wBAAIA,UAAU,UAAS,yBAAKC,IAAI,GAAGC,IAAI,aAAvC,sBAAuE,yBAAKD,IAAI,GAAGC,IAAI,cACvF,+BACE,+BACA,4BACGP,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,MAIV,wBAAIK,UAAU,UAAS,yBAAKC,IAAI,GAAGC,IAAI,WAAWC,GAAG,SAArD,IAA8D,uBAAGC,IAAI,sBAAsBJ,UAAU,UAAUtB,OAAO,SAAS2B,KAAK,gCAAtE,yBAA9D,IAA6L,yBAAKJ,IAAI,GAAGC,IAAI,mB,GA/D3KI,IAAMC,WCO5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54805be3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport t from './bingoTiles.json';\nconst tiles = t.tiles;\n\nexport default class AppComponent extends React.Component {\n  numDone = 0\n  crossOut = (e) => {\n    if (e.target.style['textDecoration'] === 'line-through') {\n      this.numDone--;\n      e.target.style['textDecoration'] = 'none'\n      return;\n    }\n    e.target.style['textDecoration'] = 'line-through';\n    this.numDone++;\n    \n    if (this.numDone === 25) {\n      console.log(\"bingo\");\n    }\n  }\n\n  rngGenerator(minimum, maximum) {\n    var values = [];\n\t  return function random() {\n\t\t  const number = Math.floor(\n\t\t\t  (Math.random() * (maximum - minimum)) + minimum\n      );\n      if (values.includes(number)) {\n        return random();\n      }\n      values.push(number);\n      return number;\n\t  };\n  }\n\n  render() {\n    var rng = this.rngGenerator(0, tiles.length);\n    var rows = [[],[],[],[],[]];\n    for (var i = 0; i < 5; i++) {\n      for (var b = 0; b < 5; b++) {\n        rows[i][b] = <td key={i + \",\" + b} onClick={this.crossOut}>{tiles[rng()]}</td>\n      }\n    }\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\"><img alt=\"\" src=\"wave.png\" /> DarkViperAU Bingo <img alt=\"\" src=\"pass.png\" /></h1>\n        <table>\n          <tbody>\n          <tr>\n            {rows[0]}\n          </tr>\n          <tr>\n            {rows[1]}\n          </tr>\n          <tr>\n            {rows[2]}\n          </tr>\n          <tr>\n            {rows[3]}\n          </tr>\n          <tr>\n            {rows[4]}\n          </tr>\n          <tr>\n            {rows[5]}\n          </tr>\n          </tbody>\n        </table>\n        <h1 className=\"header\"><img alt=\"\" src=\"lick.png\" id=\"left\"/> <a rel=\"noopener noreferrer\" className=\"nostyle\" target=\"_blank\" href=\"http://twitch.tv/DarkViperAU\">twitch.tv/DarkViperAU</a> <img alt=\"\" src=\"lick.png\" /></h1>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}