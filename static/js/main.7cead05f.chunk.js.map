{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tiles","AppComponent","numDone","crossOut","e","target","style","console","log","document","getElementById","display","getElementsByClassName","minimum","maximum","values","random","number","Math","floor","includes","push","rng","this","rngGenerator","length","rows","i","b","key","onClick","src","alt","id","width","height","className","rel","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k7BAGMA,G,WAAUA,OAEKC,E,2MACnBC,QAAU,E,EACVC,SAAW,SAACC,GACV,GAAyC,iBAArCA,EAAEC,OAAOC,MAAT,eAGF,OAFA,EAAKJ,eACLE,EAAEC,OAAOC,MAAT,eAAmC,QAGrCF,EAAEC,OAAOC,MAAT,eAAmC,eACnC,EAAKJ,UAEgB,KAAjB,EAAKA,UAEPK,QAAQC,IAAI,SACZC,SAASC,eAAe,SAASJ,MAAMK,QAAU,QACjDF,SAASG,uBAAuB,OAAO,GAAGN,MAAMK,QAAU,S,4EAIjDE,EAASC,GACpB,IAAIC,EAAS,GACb,OAAO,SAASC,IACd,IAAMC,EAASC,KAAKC,MACjBD,KAAKF,UAAYF,EAAUD,GAAYA,GAE1C,OAAIE,EAAOK,SAASH,GACXD,KAETD,EAAOM,KAAKJ,GACLA,M,+BAOT,IAFA,IAAIK,EAAMC,KAAKC,aAAa,EAAGxB,EAAMyB,QACjCC,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,IACnBC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAKC,GAAGC,GAAK,wBAAIC,IAAKF,EAAI,IAAMC,EAAGE,QAASP,KAAKpB,UAAWH,EAAMsB,MAGtE,OACE,6BACE,yBAAKS,IAAI,YAAYC,IAAI,GAAGC,GAAG,QAAQ3B,MAAO,CAAEK,QAAS,OAAQuB,MAAO,SAAUC,OAAO,YACzF,yBAAKC,UAAU,OACb,wBAAIA,UAAU,UAAS,yBAAKJ,IAAI,GAAGD,IAAI,aAAvC,sBAAuE,yBAAKC,IAAI,GAAGD,IAAI,cACvF,+BACE,+BACE,4BACGL,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,IAER,4BACGA,EAAK,MAIZ,wBAAIU,UAAU,UAAS,yBAAKJ,IAAI,GAAGD,IAAI,WAAWE,GAAG,SAArD,IAA+D,uBAAGI,IAAI,sBAAsBD,UAAU,UAAU/B,OAAO,SAASiC,KAAK,gCAAtE,yBAA/D,IAA8L,yBAAKN,IAAI,GAAGD,IAAI,cAC9M,uBAAGE,GAAG,WAAN,WAAwB,uBAAGK,KAAK,gCAAR,kB,GArEQC,IAAMC,WCO5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7cead05f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport t from './bingoTiles.json';\r\nconst tiles = t.tiles;\r\n\r\nexport default class AppComponent extends React.Component {\r\n  numDone = 0\r\n  crossOut = (e) => {\r\n    if (e.target.style['textDecoration'] === 'line-through') {\r\n      this.numDone--;\r\n      e.target.style['textDecoration'] = 'none'\r\n      return;\r\n    }\r\n    e.target.style['textDecoration'] = 'line-through';\r\n    this.numDone++;\r\n\r\n    if (this.numDone === 25) {\r\n      // bingo moment\r\n      console.log(\"bingo\");\r\n      document.getElementById('ayaya').style.display = 'block'\r\n      document.getElementsByClassName('App')[0].style.display = 'none'\r\n    }\r\n  }\r\n\r\n  rngGenerator(minimum, maximum) {\r\n    var values = [];\r\n    return function random() {\r\n      const number = Math.floor(\r\n        (Math.random() * (maximum - minimum)) + minimum\r\n      );\r\n      if (values.includes(number)) {\r\n        return random();\r\n      }\r\n      values.push(number);\r\n      return number;\r\n    };\r\n  }\r\n\r\n  render() {\r\n    var rng = this.rngGenerator(0, tiles.length);\r\n    var rows = [[], [], [], [], []];\r\n    for (var i = 0; i < 5; i++) {\r\n      for (var b = 0; b < 5; b++) {\r\n        rows[i][b] = <td key={i + \",\" + b} onClick={this.crossOut}>{tiles[rng()]}</td>\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <img src=\"ayaya.png\" alt=\"\" id='ayaya' style={{ display: 'none', width: '1000px', height:'1000px' }} />\r\n        <div className=\"App\">\r\n          <h1 className=\"header\"><img alt=\"\" src=\"wave.png\" /> DarkViperAU Bingo <img alt=\"\" src=\"pass.png\" /></h1>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                {rows[0]}\r\n              </tr>\r\n              <tr>\r\n                {rows[1]}\r\n              </tr>\r\n              <tr>\r\n                {rows[2]}\r\n              </tr>\r\n              <tr>\r\n                {rows[3]}\r\n              </tr>\r\n              <tr>\r\n                {rows[4]}\r\n              </tr>\r\n              <tr>\r\n                {rows[5]}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <h1 className=\"header\"><img alt=\"\" src=\"lick.png\" id=\"left\" /> <a rel=\"noopener noreferrer\" className=\"nostyle\" target=\"_blank\" href=\"http://twitch.tv/DarkViperAU\">twitch.tv/DarkViperAU</a> <img alt=\"\" src=\"lick.png\" /></h1>\r\n          <p id='credits'>Made by <a href=\"http://twitter.com/abyssalnz\">Abyssal</a></p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}